/*
Data Download Automation

Skills used: iteration, 

/*

# Import necessary libraries

import os

os.chdir(r'C:\Users\Desktop\Project\Portfolio_project')
path = os.getcwd()
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import pandas as pd
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from tqdm import tqdm

# Initialize the Chrome browser

service = Service(executable_path=r'C:\path\to\chromedriver.exe')
options = webdriver.ChromeOptions()
driver  = webdriver.Chrome(service=service, options= options)

# Navigate to the url

driver.get('https://www.ctvc.co/climate-tech-vc/?fbclid=IwAR1wvh5o8tLFm-x3Ai3_unLNIaTQj9ouborszm9sslt4sS2B3kysI8bqK14')
#driver.maximize_window()
driver.implicitly_wait(30)
#driver.refresh()
#driver.implicitly_wait(50)

# Scroll down the page to the "Load more" button and click it until no more results are loaded

while True:
    try:
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")#scroll down
        driver.implicitly_wait(30)
        driver.find_element( By.XPATH, '/html/body/div[4]/div/div/a').click()#click the "Load more" button
        driver.implicitly_wait(30)
    except:
        break
print('Load more completed---\nAll of the')# Notify the user

# Scroll the page up to locate the first element of the table

driver.execute_script("window.scrollTo(0, -document.body.scrollHeight);")
driver.implicitly_wait(30)

# Initialize an empty dictionary for images

dic_img = {}
driver.implicitly_wait(30)

# Find the table 

search_res_div = driver.find_element(By.XPATH, '//*[@id="search-airtable-results"]')
# Find all image elements on the page
image_elements = driver.find_elements(By.TAG_NAME, 'img')

# Iterate through the found image_elements

for index, image_element in enumerate(tqdm(image_elements)):# Added progress bar 

    # Get url of the image

    image_src = image_element.get_attribute('src')
    dic_img[index] = image_src
    #print(f'{index} added' )
    response = requests.get(image_src)
    with open(f'image_{index}.jpg', 'wb') as f:# Write images to the file - naming pattern: image_{index}.jpg
        f.write(response.content)

# Initialize an empty dictionary for image titles

dic_title = {}

# Find all image elements on the page - the 'alt='attribute stores the title

titles = driver.find_elements(By.TAG_NAME, 'img')

# Iterate through the found image_elements

for index, title in enumerate(tqdm(titles, desc= 'Loading titles...')):# Added progress bar with description

    # Get title of the image

    image_title = title.get_attribute('alt')
    dic_title[index] = image_title
    
# Initialize an empty dictionary for links

dic_link = {}

# Find all link elements on the page

links = driver.find_elements(By.TAG_NAME, 'a')

# Iterate through the found link elements

for index, link in enumerate(tqdm(links, desc= 'Loading links...')):# Added progress bar with description

    # Get the url

    link_comp = link.get_attribute('href')
    dic_link[index] = link_comp
    #print(f'{index} added' )

# Initialize an empty dictionary for company description

dic_text = {}

# Find all paragraph elements on the page

texts = driver.find_elements(By.TAG_NAME, 'p')

# Iterate through the found paragraph elements

for index, text in enumerate(tqdm(texts, desc= 'Loading texts...')):# Added progress bar with description
    # Get the company description
    text_img = text.text
    dic_text[index] = text_img
    #print(f'{index} added' )  

# Close the browser

driver.quit()

# Create DataFrames from dictionaries

df1 = pd.DataFrame.from_dict(dic_link, orient= 'index')
df2 = pd.DataFrame.from_dict(dic_text, orient= 'index')
df3= pd.DataFrame.from_dict(dic_title, orient= 'index')

# Concatenate DataFrames into one

df = pd.concat([df1, df2, df3], axis=1)

# print(df.head())# Check

# Save to a CSV file

df.to_csv('Output_list.csv')
